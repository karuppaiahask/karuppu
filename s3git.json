{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description":  send the file using url into S3 Bucket ",
  "Parameters": {
    "BucketName": {
      "Type": "String",
      "Description": "The name of the S3 Bucket to create"
    }
  },
  "Resources": {
    "S3github": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref" : "BucketName" },
        "AccessControl": "BucketOwnerFullControl"
      }
    },
    "S3Copy": {
      "Type": "Custom::CopyToS3",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CopyFilesToS3",
            "Arn"
          ]
        },
        "S3BucketName": 
          "S3github" ,
        
        "Urls": [
          "s3://askkgk/s3git.json",
          

          
        ]
      }
    },
    "CopyFilesToS3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "",
                "import os",
                "import urllib.request",
                "from urllib.parse import urlparse",
                "import json",
                
                "import boto3",
                "import cfnresponse",
                "",
                "print('Loading function')",
                "",
                "s3 = boto3.resource('s3')",
                "",
                "",
                "def save_to_local(url):",
                "    urlPath = urlparse(url).path",
                "    fileName = os.path.basename(urlPath)",
                "    filePath = '/tmp/' + fileName",
                "    urllib.request.urlretrieve(url, filePath)",
                "    return filePath",
                "",
                "",
                "def upload_to_s3(filePath, bucket):",
                "    fileName = os.path.basename(filePath)",
                "    s3.Object(bucket, fileName).put(Body=open(filePath, 'rb'))",
                "",
                "",
                "def copy_to_s3(url, bucket):",
                "    filePath = save_to_local(url)",
                "    upload_to_s3(filePath, bucket)",
                "",
                "",
                "def lambda_handler(event, context):",
                "    print('Received event: ' + json.dumps(event, indent=2))",
                "",
                "    if event['RequestType'] == 'Create':",
                "        # get the properties set in the CloudFormation resource",
                "        properties = event['ResourceProperties']",
                "        urls = properties['Urls']",
                "        bucket = properties['S3BucketName']",
                "",
                "        try:",
                "            for url in urls:",
                "                copy_to_s3(url, bucket)",
                "",
                "        except Exception as e:",
                "            print(e)",
                "            cfnresponse.send(event, context, cfnresponse.FAILED, {",
                "                             'Response': 'Failure'})",
                "            return",
                "",
                "    cfnresponse.send(event, context, cfnresponse.SUCCESS,",
                "                     {'Response': 'Success'})"
              ]
            ]
          }
        },
        "Runtime": "python3.6"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  }
}